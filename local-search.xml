<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go学习之旅-变量</title>
    <link href="/2023/04/25/Go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-%E5%8F%98%E9%87%8F/"/>
    <url>/2023/04/25/Go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><!-- markdownlint-disable MD041 MD002--><h1 id="【1】变量的引入："><a href="#【1】变量的引入：" class="headerlink" title="【1】变量的引入："></a>【1】变量的引入：</h1><p>一个程序就是一个世界<br>不论是使用哪种高级程序语言编写程序,变量都是其程序的基本组成单位，</p><h1 id="【2】变量的介绍："><a href="#【2】变量的介绍：" class="headerlink" title="【2】变量的介绍："></a>【2】变量的介绍：</h1><p>变量相当于内存中一个数据存储空间的表示<br><img src="https://cdn.jsdelivr.net/gh/LaTourEiffel12138/picGo/img/other/202304250039001.png" srcset="/img/about/loading.gif"></p><h1 id="【3】变量的使用步骤："><a href="#【3】变量的使用步骤：" class="headerlink" title="【3】变量的使用步骤："></a>【3】变量的使用步骤：</h1><p>1.声明<br>2.赋值<br>3.使用  </p><p>PS：看到VSCode的目录结构：</p><p><img src="https://cdn.jsdelivr.net/gh/LaTourEiffel12138/picGo/img/other/202304250040537.png" srcset="/img/about/loading.gif"></p><p>【4】代码练习：</p><pre><code class="go">package mainimport &quot;fmt&quot;func main()&#123;        //1.变量的声明        var age int        //2.变量的赋值        age = 18        //3.变量的使用        fmt.Println(&quot;age = &quot;,age)        //声明和赋值可以合成一句：        var age2 int = 19        fmt.Println(&quot;age2 = &quot;,age2)        // var age int = 20;        // fmt.Println(&quot;age = &quot;,age)        /*变量的重复定义会报错：        # command-line-arguments                .\main.go:16:6: age redeclared in this block                                previous declaration at .\main.go:6:6        */       //不可以在赋值的时候给与不匹配的类型       var num int = 12.56       fmt.Println(&quot;num = &quot;,num);&#125;</code></pre><p>【5】变量的4种使用方式：<br>【6】支持一次性声明多个变量（多变量声明）</p><pre><code class="go">package mainimport &quot;fmt&quot;//全局变量：定义在函数外的变量var n7 = 100var n8 = 9.7//设计者认为上面的全局变量的写法太麻烦了，可以一次性声明：var (        n9 = 500        n10 = &quot;netty&quot;)func main()&#123;        //定义在&#123;&#125;中的变量叫：局部变量        //第一种：变量的使用方式：指定变量的类型，并且赋值，        var num int = 18        fmt.Println(num)        //第二种：指定变量的类型，但是不赋值，使用默认值         var num2 int        fmt.Println(num2)        //第三种：如果没有写变量的类型，那么根据=后面的值进行判定变量的类型 （自动类型推断）        var num3 = &quot;tom&quot;        fmt.Println(num3)        //第四种：省略var，注意 := 不能写为 =           sex := &quot;男&quot;        fmt.Println(sex)        fmt.Println(&quot;------------------------------------------------------------------&quot;)        //声明多个变量：        var n1,n2,n3 int        fmt.Println(n1)        fmt.Println(n2)        fmt.Println(n3)        var n4,name,n5 = 10,&quot;jack&quot;,7.8        fmt.Println(n4)        fmt.Println(name)        fmt.Println(n5)        n6,height := 6.9,100.6        fmt.Println(n6)        fmt.Println(height)        fmt.Println(n7)        fmt.Println(n8)        fmt.Println(n9)        fmt.Println(n10)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go学习之旅-变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go学习之旅--环境搭建</title>
    <link href="/2023/04/24/Go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/04/24/Go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><!-- markdownlint-disable MD041 MD002--><h1 id="【1】搭建Go开发环境-安装和配置SDK"><a href="#【1】搭建Go开发环境-安装和配置SDK" class="headerlink" title="【1】搭建Go开发环境 - 安装和配置SDK"></a>【1】搭建Go开发环境 - 安装和配置SDK</h1><p>基本介绍:</p><ol><li>SDK的全称(Software Development Kit 软件开发工具包)</li><li>SDK是提供给开发人员使用的，其中包含了对应开发语言的工具包。</li></ol><h1 id="【2】SDK下载"><a href="#【2】SDK下载" class="headerlink" title="【2】SDK下载"></a>【2】SDK下载</h1><ol><li>Go语言的官网为: golang.org ,无法访问，需要翻墙。</li><li>SDK下载地址 : Golang中文社区：<a href="https://studygolang.com/dl">https://studygolang.com/dl</a>  (1.15.6版本)</li></ol><h1 id="【3】安装SDK："><a href="#【3】安装SDK：" class="headerlink" title="【3】安装SDK："></a>【3】安装SDK：</h1><p>请注意：安装路径不要有中文或者特殊符号如空格等<br>SDK安装目录建议:一般我安装在d:/golang_sdk安装时 , 基本上是傻瓜式安装，解压就可以使用</p><p>（1）解压zip：<br><img src="https://cdn.jsdelivr.net/gh/LaTourEiffel12138/picGo/img/other/202304250025552.png" srcset="/img/about/loading.gif"><br>go整个目录就是sdk<br><img src="https://cdn.jsdelivr.net/gh/LaTourEiffel12138/picGo/img/other/202304250026530.png" srcset="/img/about/loading.gif"></p><p>（2）go目录下：<br><img src="https://cdn.jsdelivr.net/gh/LaTourEiffel12138/picGo/img/other/202304250026519.png" srcset="/img/about/loading.gif"></p>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go学习之旅--环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2023/04/24/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/04/24/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><!-- markdownlint-disable MD041 MD002--><p><strong>说明</strong>：现在markDown编译器和各平台支持情况都不太统一，为了达到一些效果会使用语法超集，但有些平台支持不好，请自行裁剪。简书使用的精简语法集合，文中有些语法效果显示不出来，为了发文的格式统一，同时也建议谨慎使用此类语法。</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-设计理念"><a href="#1-1-设计理念" class="headerlink" title="1.1 设计理念"></a>1.1 设计理念</h3><ul><li>Markdown 易于阅读，方便创作web文档，利于各平台无缝分发。</li><li>Markdown 语法灵感最大的来源还是纯文本 email 的格式，完全由标点符号标签组成的纯文本。</li><li>Markdown 文件应该以纯文本形式原样发布，不应该包含标记标签和格式化指令。</li></ul><h3 id="1-2-内联-HTML-语法"><a href="#1-2-内联-HTML-语法" class="headerlink" title="1.2 内联 HTML 语法"></a>1.2 内联 HTML 语法</h3><ul><li>HTML 是一种<strong>发布格式</strong>，Markdown 是一种<strong>创作格式</strong>。</li><li>Markdown语法集合比较小，只是HTML标签的一小部分。</li><li>对于 Markdown 中未包含的标签, 可以直接使用 HTML标签，例如用 HTML <code>&lt;a&gt;</code> 标签替代 Markdown 的链接语法。</li></ul><h3 id="1-3-特殊字符自动转义"><a href="#1-3-特殊字符自动转义" class="headerlink" title="1.3 特殊字符自动转义"></a>1.3 特殊字符自动转义</h3><p>  在 HTML 中, 有两个字符需要特殊对待: &lt; 和 &amp;，左尖括号用于起始标签。如果你想将它们用作字面量, 你必须将它们转义为字符实体, 例如<code>&lt;</code> 和 <code>&amp;</code>。</p><h2 id="二、行内语法讲解"><a href="#二、行内语法讲解" class="headerlink" title="二、行内语法讲解"></a>二、行内语法讲解</h2><h3 id="2-1-注释的表述"><a href="#2-1-注释的表述" class="headerlink" title="2.1 注释的表述"></a>2.1 注释的表述</h3><ul><li><strong>代码法</strong></li></ul><pre><code>&lt;div style=&#39;display: none&#39;&gt;哈哈我是注释，不会在浏览器中显示。&lt;/div&gt;</code></pre><ul><li><strong>html注释</strong></li></ul><p>既然支持html语法，那也支持html注释，快捷键 comment + /。</p><pre><code>&lt;!--哈哈我是注释，不会在浏览器中显示。--&gt;&lt;!--哈哈我是多段注释，不会在浏览器中显示。    --&gt;</code></pre><ul><li><strong>hack方法</strong></li></ul><p>hack方法就是利用markdown的解析原理来实现注释的。<br>一般有的markdown解析器不支持上面的注释方法，这个时候就可以用hack方法。<br>hack方法比上面2种方法稳定得多，但是语义化太差。</p><pre><code>[//]: # (哈哈我是最强注释，不会在浏览器中显示。)[^_^]: # (哈哈我是最萌注释，不会在浏览器中显示。)[//]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</code></pre><h3 id="2-2-分级标题、任务列表"><a href="#2-2-分级标题、任务列表" class="headerlink" title="2.2 分级标题、任务列表"></a>2.2 分级标题、任务列表</h3><ul><li><strong>分级标题</strong></li></ul><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题  &lt;!--最多6级标题--&gt;</code></pre><p>由于用了标记编辑器会把所有标题写到目录大纲中，在这里写的演示标题也会列进去，所以就不演示了。同学们自己在编辑器中观察，很简单，一级标题字号最大，依级递减。</p><ul><li><strong>任务列表</strong></li></ul><p>Markdown 语法：</p><pre><code>- [ ] 任务一 未做任务 `- + 空格 + [ ]`- [x] 任务二 已做任务 `- + 空格 + [x]`</code></pre><p>效果如下：</p><ul><li>任务一 未做任务 <code>- + 空格 + [ ]</code></li><li>任务二 已做任务 <code>- + 空格 + [x]</code></li></ul><h3 id="2-3-缩进、换行、空行、对齐方式"><a href="#2-3-缩进、换行、空行、对齐方式" class="headerlink" title="2.3 缩进、换行、空行、对齐方式"></a>2.3 缩进、换行、空行、对齐方式</h3><ul><li><strong>首行缩进</strong></li></ul><p>不同特殊占位符所占空白是不一样大的。</p><pre><code>【1】 &amp;emsp;或&amp;#8195; //全角【2】 &amp;ensp;或&amp;#8194; //半角【3】 &amp;nbsp;或&amp;#160;  //半角之半角</code></pre><ul><li><strong>换行</strong></li></ul><p>由于markdown编辑器的不同,可能在一行字后面，直接换行回车，也能实现换行，但是在Visual Studio Code上，想要<strong>换行必须得在一行字后面空两个格子才行</strong>。</p><ul><li><strong>空行</strong></li></ul><p>在编辑的时候有多少个空行(只要这一行只有回车或者space没有其他的字符就算空行)，在<strong>渲染之后，只隔着一行</strong>。</p><ul><li><strong>对齐方式</strong></li></ul><p>代码：</p><pre><code>&lt;center&gt;行中心对齐&lt;/center&gt;&lt;p align=&quot;left&quot;&gt;行左对齐&lt;/p&gt;&lt;p align=&quot;right&quot;&gt;行右对齐&lt;/p&gt;</code></pre><p>显示效果：</p><p>行中心对齐</p><p>行左对齐</p><p>行右对齐</p><h3 id="2-4-斜体、粗体、删除线、下划线、背景高亮"><a href="#2-4-斜体、粗体、删除线、下划线、背景高亮" class="headerlink" title="2.4 斜体、粗体、删除线、下划线、背景高亮"></a>2.4 斜体、粗体、删除线、下划线、背景高亮</h3><ul><li>代码：</li></ul><pre><code>*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~++下划线++==背景高亮==</code></pre><ul><li>显示效果：</li></ul><p>  <em>斜体</em>  <strong>粗体</strong>  <strong>加粗斜体</strong>  <del>删除线</del>  ++删除线++   ==背景高亮==</p><h3 id="2-5-超链接、页内链接、自动链接、注脚"><a href="#2-5-超链接、页内链接、自动链接、注脚" class="headerlink" title="2.5 超链接、页内链接、自动链接、注脚"></a>2.5 超链接、页内链接、自动链接、注脚</h3><ul><li><strong>行内式</strong></li></ul><p>语法说明：</p><p>[]里写链接文字，()里写链接地址, ()中的””中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字，链接地址与title前有一个空格。</p><p>代码：</p><pre><code>欢迎阅读 [择势勤](https://www.jianshu.com/u/16d77399d3a7 &quot;择势勤&quot;)</code></pre><p>显示效果：</p><p>欢迎阅读 <a href="https://www.jianshu.com/u/16d77399d3a7">择势勤</a></p><ul><li><strong>参考式</strong></li></ul><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p>语法说明：<br>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址。</p><p>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br>[链接文字]：链接地址的形式，见代码的最后一行。</p><p>代码：</p><pre><code>我经常去的几个网站[Google][1]、[Leanote][2]。[1]:http://www.google.com [2]:http://www.leanote.com</code></pre><p>显示效果：</p><p>我经常去的几个网站<a href="https://links.jianshu.com/go?to=http://www.google.com">Google</a>、<a href="https://links.jianshu.com/go?to=http://www.leanote.com">Leanote</a>。</p><ul><li><strong>注脚</strong></li></ul><p>语法说明：</p><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><p>注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。</p><p>代码：</p><pre><code>使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2]。[^1]:Markdown是一种纯文本标记语言[^2]:HyperText Markup Language 超文本标记语言</code></pre><p>显示效果：</p><p>使用 Markdown[<a href="https://latoureiffel12138.github.io/2020/05/12/Markdown%E8%AF%AD%E6%B3%95/#fn1">1]</a>可以效率的书写文档, 直接转换成 HTML[<a href="https://latoureiffel12138.github.io/2020/05/12/Markdown%E8%AF%AD%E6%B3%95/#fn2">2]</a>。</p><p>注：脚注自动被搬运到最后面，请到文章末尾查看，脚注后方的链接可以直接跳转回到加注的地方。</p><ul><li><strong>锚点（页内超链接）</strong></li></ul><p>网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的，只支持在标题后插入锚点，其它地方无效。</p><p>代码：</p><pre><code>## 0. 目录&#123;#index&#125;```显示效果：跳转到[目录](https://latoureiffel12138.github.io/2020/05/12/Markdown语法/#index)- **自动链接**语法说明：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用<>包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：代码：```&lt;http://example.com/&gt; &emsp;&emsp; &lt;address@example.com&gt;```显示效果：<[http://example.com/](https://links.jianshu.com/go?to=http%3A%2F%2Fexample.com%2F)>   <[address@example.com](https://links.jianshu.com/go?to=mailto%3Aaddress@example.com)>### 2.6 无序列表、有序列表、定义型列表- **无序列表**  使用 *，+，- 表示无序列表。  代码：```* 无序列表项 一+ 无序列表项 二- 无序列表项 三```显示效果：- 无序列表项 一- 无序列表项 二- 无序列表项 三- **有序列表**有序列表则使用数字接着一个英文句点。代码：```1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三```显示效果：1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三- **定义型列表表**语法说明：> 定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)代码```:   轻量级文本标记语言（左侧有一个可见的冒号和四个不可见的空格）```显示效果：Markdown: 轻量级文本标记语言，可以转换成html，pdf等格式### 2.7 插入图像语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。Markdown 语法：```<center>  <!--开始居中对齐-->![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif "图片Title")格式: ![图片Alt](图片地址 "图片Title")</center> <!--结束居中对齐-->```效果如下：[![img](https://upload-images.jianshu.io/upload_images/1496626-c3d52ee452341b61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/310/format/webp)](https://upload-images.jianshu.io/upload_images/1496626-c3d52ee452341b61.png?imageMogr2/auto-orient/strip|imageView2/2/w/310/format/webp)GitHub set up### 2.8 多级引用语法说明：引用需要在被引用的文本前加上>符号和空格，允许多层嵌套，也允许你偷懒只在整个段落的第一行最前面加上 > 。代码：```>>> 请问 Markdwon 怎么用？ - 小白>> 自己看教程！ - 愤青> 教程在哪？ - 小白```显示效果：> > > 请问 Markdwon 怎么用？ - 小白> > 自己看教程！ - 愤青> 教程在哪？ - 小白### 2.9 转义字符、字体、字号、颜色- **转义字符**Markdown中的转义字符为\，转义的有：\ 反斜杠 ` 反引号 * 星号 _ 下划线 &#123;&#125; 大括号 [] 中括号 () 小括号  # 井号 + 加号 - 减号 . 英文句号 ! 感叹号- **字体、字号、颜色**代码：```<font face="黑体">我是黑体字</font><font face="微软雅黑">我是微软雅黑</font><font face="STCAIYUN">我是华文彩云</font><font color=#0099ff size=12 face="黑体">黑体</font><font color=gray size=5>gray</font><font color=#00ffff size=3>null</font>```显示效果：我是黑体字我是微软雅黑我是华文彩云黑体graynull## 三、块语法讲解### 3.1 内容目录在段落中填写 [TOC] 以显示全文内容的目录结构。```[TOC]```效果参见最上方的目录。### 3.2 代码块对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在ESC键下方）包裹代码。- **行内式**代码：```C语言里的函数 `scanf()` 怎么使用？```显示效果：C语言里的函数 `scanf()` 怎么使用？- **缩进式多行代码**缩进 4 个空格或是 1 个制表符一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。代码：```#include &lt;stdio.h&gt;int main(void)&#123;    printf(&#34;Hello world\n&#34;);&#125;```显示效果：```#include &lt;stdio.h&gt;int main(void)&#123;    printf(&#34;Hello world\n&#34;);&#125;```- **用六个`包裹多行代码**代码：```、、、include <stdio.h>int main(void)&#123;printf("Hello world\n");&#125;、、、```**显示效果：**```include <stdio.h>int main(void)&#123;printf("Hello world\n");&#125;```### 3.3 流程图编辑自有道云笔记，代码：``````graph LRA-->B``````sequenceDiagramA->>B: How are you?B->>A: Great!``````显示效果：```graph LRA-->BsequenceDiagramA->>B: How are you?B->>A: Great!```### 3.4 表格语法说明：不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。`-` 左对齐， `:-:` 中心对齐，`-:` 右对齐表格代码：```|学号|姓名|序号||-|-|-||小明明|男|5||小红|女|79||小陆|男|192|```原生方式写表格：| 学号   | 姓名 | 序号 || ------ | ---- | ---- || 小明明 | 男   | 5    || 小红   | 女   | 79   || 小陆   | 男   | 192  |### 3.5 LaTeX 公式- **表示行内公式**代码：```质能守恒方程可以用一个很简洁的方程式 `$E = m c^2 $`来表达。```显示效果：质能守恒方程可以用一个很简洁的方程式 `$E = m c^2 $`来表达。- **表示整行公式**  大部分的浏览器支持的```$$ 公式 $$```有道云笔记 使用格式，``````mathE = mc^2``````块级公式：``````mathx = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; ``````math[\frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125;]```</code></pre><p>显示效果：</p><pre><code>x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; [\frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125;]</code></pre><p>访问 <a href="https://links.jianshu.com/go?to=https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p><h3 id="3-6-分隔线"><a href="#3-6-分隔线" class="headerlink" title="3.6 分隔线"></a>3.6 分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><p>代码：</p><pre><code>* * *********- - ------------</code></pre><p>显示效果都一样：</p><hr><hr><hr><hr><hr><h3 id="3-7-HTML-原始码"><a href="#3-7-HTML-原始码" class="headerlink" title="3.7 HTML 原始码"></a>3.7 HTML 原始码</h3><p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：</p><p><strong>代码：</strong></p><pre><code>第一个例子：&lt;div class=&quot;footer&quot;&gt;© 2004 Foo Corporation&lt;/div&gt;第二个例子：&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;&lt;th&gt;星期一&lt;/th&gt;&lt;th&gt;星期二&lt;/th&gt;&lt;th&gt;星期三&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;李强&lt;/td&gt;&lt;td&gt;张明&lt;/td&gt;&lt;td&gt;王平&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;</code></pre><p>显示效果：</p><p>第一个例子：</p><p>© 2004 Foo Corporation</p><p>第二个例子：</p><table><thead><tr><th>值班人员</th><th>星期一</th><th>星期二</th><th>星期三</th></tr></thead><tbody><tr><td>李强</td><td>张明</td><td>王平</td><td></td></tr></tbody></table><h3 id="3-8-特殊字"><a href="#3-8-特殊字" class="headerlink" title="3.8 特殊字"></a>3.8 特殊字</h3><table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td></td><td>空格符</td><td><code> </code></td></tr><tr><td>&lt;</td><td>小于号</td><td><code>&lt;</code></td></tr><tr><td>&gt;</td><td>大于号</td><td><code>&gt;</code></td></tr><tr><td>&amp;</td><td>和号</td><td><code>&amp;</code></td></tr><tr><td>￥</td><td>人民币</td><td><code>¥</code></td></tr><tr><td>©</td><td>版权</td><td><code>©</code></td></tr><tr><td>®</td><td>注册商标</td><td><code>®</code></td></tr><tr><td>°C</td><td>摄氏度</td><td><code>°C</code></td></tr><tr><td>±</td><td>正负号</td><td><code>±</code></td></tr><tr><td>×</td><td>乘号</td><td><code>×</code></td></tr><tr><td>÷</td><td>除号</td><td><code>÷</code></td></tr><tr><td>²</td><td>平方（上标²）</td><td><code>²</code></td></tr><tr><td>³</td><td>立方（上标³）</td><td><code>³</code></td></tr></tbody></table><hr><ol><li>Markdown是一种纯文本标记语言 <a href="https://latoureiffel12138.github.io/2020/05/12/Markdown%E8%AF%AD%E6%B3%95/#fnref1">↩</a></li><li>HyperText Markup Language 超文本标记语言 <a href="https://latoureiffel12138.github.io/2020/05/12/Markdown%E8%AF%AD%E6%B3%95/#fnref2">↩</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdk8--Lambda表达式</title>
    <link href="/2021/05/17/jdk8-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/05/17/jdk8-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<ol><li>lamdba 表达式<br>主要是简化代码量,将代码执行过程量代码过长的部分进行处理简化(个人理解)<br>官方定义:<br>lambda表达式是一种匿名函数,lamdba允许函数作为一个方法的参数(函数作为方法参数传递),将代码象数据一样传递,目的是简化代码编写.</li></ol><ol start="2"><li><p>函数式接口</p><p>个人理解: 就是一个接口,里面只有一个抽象方法</p><p>官方定义: …..没找了</p><p>jdk8 提供了一个注解, 校验编译时是否符合语法</p><p>注解名: @FunctionalInterface</p></li><li><p>示例<br>传统新建一个线程并启动的代码如下:</p><pre><code class="java">Runnable runnable = new Runnable() &#123;    @Override    public void run() &#123;        System.out.println(&quot;running...&quot;);    &#125;&#125;;new Thread(runnable).start();/**上述是我们jdk8以前常用的新建线程的方式,需要实例化一个runnable 对象将runnable 对象传入实例化的Thread中,调用start方法*//** 在jdk8 后, 此种类似的方式可简化为一下公式函数式对象  变量名  =  (参数1,参数2....) -&gt; &#123; 方法体  &#125;;例如下面的线程创建,可以写为如下方式:*///简化1Runnable r2 = ()-&gt;System.out.println(&quot;简化方式1&quot;);new Thread(r2).start();/** 上述例子中,因为new Runnable() 中没有参数传入,所以在简化时我们也不传入参数,方法体中    展示我们需要执行的业务,逻辑代码即可,上述简化1还可以简化为如下方式:*///简化2new Thread(()-&gt;System.out.println(&quot;简化方式2&quot;)).start();/** 在简化1 中可以看到,我们使用进程启用时,最终使用的时thread 对象方式,Thread 对象中也需要一个实例对象传入,所以也可以看作一个内部匿名方法进行调用*/</code></pre></li></ol><p>​        上述示例及过程可以看到,简化方式可以减少代码量的开发,以前要写很多行的代码,现在只需要整理为一行就可        以实现以前多行的代码的效果</p><p>​    上述示例只是表述的无参情况下的应用,那么有参呢,请参考如下代码:</p><pre><code class="Java">/** 接下来我新建一个比较器,用来处理list或者arrays 的排序,分组*/Comparator&lt;String&gt; comparator = new Comparator&lt;String&gt;() &#123;            @Override            public int compare(String o1, String o2) &#123;                return o1.length()-o2.length();            &#125;        &#125;;TreeSet&lt;String&gt; treeSet = new TreeSet&lt;&gt;(comparator);/** 传统方式 下同示例1中的写法,需要将comparator 实现内部类方法,然后将实例化的comparator传入TreeSet 中进行 处理后续业务,其中需要用到两个参数o1,o2 简化后代码如下:*///示例1Comparator&lt;String&gt; c2 = (o1,o2)-&gt;o1.length()-o2.length();TreeSet&lt;String&gt; treeSet1 = new TreeSet&lt;&gt;(c2);/** 简化后可以看到,只需要在()中带入o1,o2 即可, 且不需要关心参数的类型,此处我觉得时因为类似于反射(反射也不太懂),将传入的参数与Comparator&lt;String&gt; 的内部接口进行映射对照,所以可以找到执行的时compare的方法示例1 还可以简化为如下代码:*///示例2TreeSet&lt;String&gt; treeSet2 = new TreeSet&lt;&gt;((o1,o2)-&gt;o1.length()-o2.length());/** 因为new TreeSet中需要传入一个Comparator的实例对象,所以可以等量代换为示例2 的写法*/    </code></pre><ol start="4"><li><p>注意事项</p><p>lambda 使用了新的操作符号-&gt;</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/12/hello-world/"/>
    <url>/2021/03/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>